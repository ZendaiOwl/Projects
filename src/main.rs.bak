//use std::io::{self, BufReader};
//use std::io::prelude::*;
//use std::io;
// use std::env;
//use std::fs::metadata;
use std::{env, fs, io};
use std::io::BufReader;
use std::io::BufRead;
use std::io::Write;
use std::fs::File;
use std::path::{Path, PathBuf};
//use std::path::Path;
use colored::Colorize;
//use walkdir::{DirEntry, WalkDir};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    run_program(&args);
    Ok(())
}

fn run_program(arg: &Vec<String>) {
    match arg.len() {
        1 => {
            println!("{}", error_format("No arguments given"));
        },
        2 => {
            if arg[1] == "ls" {
                //ls().ok();
                match ls() {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } else if arg[1] == "echo" {
                echo(&arg);
            } else if arg[1] == "gr" {
                eprintln!("{} {}/4 rusty gr [ Pattern ] [ File ]", error_format("Invalid number of arguments:"), arg.len());
            } else if arg[1] == "rd" {
                eprintln!("{}: {}/3 rusty rd [ File ]", error_format("Invalid number of arguments"), arg.len());
            } else {
                print_error_1st_arg_invalid(&arg[1]);
            }
        },
        3 => {
            if arg[1] == "ls" {
                if arg[2] == "-a" {
                    match ls_all() {
                        Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                        _ => (),
                    }
                } else {
                    match ls_path(&arg[2]) {
                        Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                        _ => (),
                    }
                } 
            } else if arg[1] == "echo" {
                echo(&arg);
            } else if arg[1] == "gr" {
                eprintln!("{} {}/4 rusty gr [ Pattern ] [ File ]", error_format("Invalid number of arguments:"), arg.len());
            } else if arg[1] == "rd" {
                match rd(&arg[2]) {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } else {
                print_error_1st_arg_invalid(&arg[1]);
            }
        },
        4 => {
            if arg[1] == "ls" {
                if arg[2] == "-a" {
                    match ls_all_path(&arg[3]) {
                        Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                        _ => (),
                    }
                } else {
                    eprintln!("{} {}", error_format("Invalid argument:"), &arg[2]);
                }
            } else if arg[1] == "echo" {
                echo(&arg);
            } else if arg[1] == "gr" {
                match gr(&arg[2], &arg[3]) {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } else if arg[1] == "rd" {
                eprintln!("{}: {}/3 rusty rd [ File ]", error_format("Invalid number of arguments"), arg.len());
            } else {
                print_error_1st_arg_invalid(&arg[1]);
            }
        },
        5.. => {
            if arg[1] == "ls" {
                eprintln!("{}: {}/4 max", error_format("Invalid number of arguments"), arg.len());
            } else if arg[1] == "echo" {
                echo(&arg);
            } else if arg[1] == "gr" {
                eprintln!("{}: {}/4 rusty gr [ Pattern ] [ File ]", error_format("Invalid number of arguments"), arg.len());
            } else if arg[1] == "rd" {
                eprintln!("{}: {}/3 rusty rd [ File ]", error_format("Invalid number of arguments"), arg.len());
            } else {
                print_error_1st_arg_invalid(&arg[1]);
            }
        },
        _ => {
            print_error("Invalid argument(s)");
        },
    }
}

fn print_error(s: &str) {
  eprintln!("{}", error_format(s));
}


fn print_error_1st_arg_invalid(s: &str) {
  eprintln!("{} {} [ ls | echo | gr | rd ]", error_format("Invalid first argument:"), s);
}

fn error_format(s: &str) -> String {
    format!("{} {}", "ERROR".red().bold(), s)
}

fn dir_format(s: &str) -> String {
    format!("{}", s.blue())
}

fn file_format(s: &str) -> String {
    format!("{}", s)
}

fn check_ls(args: &Vec<String>) {
    match args.len() {
        2 => {
            match ls() {
                Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                _ => (),
            }
        },
        3 => {
            if args[2] == "-a" {
                match ls_all() {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } else {
                match ls_path(args[2]) {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } 
        },
        4 => {
            if arg[2] == "-a" {
                match ls_all_path(&arg[3]) {
                    Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                    _ => (),
                }
            } else {
                eprintln!("{} {}", error_format("Invalid argument:"), arg[2]);
            }
        },
        _ => {
            print_error("Invalid argument(s)");
        },
    }
}

fn check_rd(args: &Vec<String>) {
    match args.len() {
        3 => {
            match rd(&args[2]) {
                Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                _ => (),
            }
        },
        _ => {
            print_error("Invalid argument(s)");
        },
    }
}


fn check_gr(args: &Vec<String>) {
    match args.len() {
        4 => {
            match gr(&arg[2], &arg[3]) {
                Err(e) => eprintln!("{} {}", "ERROR".red().bold(), e),
                _ => (),
            }
        },
        _ => {
            print_error("Invalid argument(s)");
        },
    }
}

fn echo(s: &Vec<String>) {
    for i in 2..s.len() {
        println!("{}", &s[i]);
    }
}

fn gr(pattern: &str, file: &str) -> Result<(), Box<dyn std::error::Error>> {
    //let content = std::fs::read_to_string(file)?;
    let content = File::open(file)?;
    let buf = BufReader::new(content);
    let stdout = io::stdout();
    let mut handle = stdout.lock();
    for line in buf.lines() {
        match line {
            Ok(line) => {
                if line.contains(pattern) {
                    writeln!(handle, "{}: {}", file, line)?;
                }
            },
            Err(_) => {
                eprintln!("{}: {}", error_format("Not a UTF-8 formated file"), file);
                break;
            },
        }
    }
    Ok(())
}

fn rd(path: &str) -> Result<(), Box<dyn std::error::Error>> {
    // io::Result<()>
    //let path = std::env::args().nth(2).expect("Not a file");
    let file = File::open(path)?;
    let buffer = BufReader::new(file);
    let stdout = io::stdout();
    let mut handle = stdout.lock();
    for line in buffer.lines() {
        match line {
            Ok(line) => {
                writeln!(handle, "{}", line)?;
            },
            Err(_) => {
                eprintln!("{}: {}", error_format("Not a UTF-8 formated file"), path);
                break;
            },
        }
    }
    Ok(())
}

fn path_buf_string(file: &PathBuf, pattern: &str) -> String {
    Path::new(file).strip_prefix(pattern).expect("No such prefix").display().to_string()
}

fn ls() -> Result<(), Box<dyn std::error::Error>> {
    let current_dir = env::current_dir()?;
    println!("{}: {}", "Current directory".green().bold(), current_dir.display());
    let mut files = fs::read_dir(".")?
        .map(|res| res.map(|e| e.path()))
        .collect::<Result<Vec<_>, io::Error>>()?;
    files.sort();
    for f in files {
        let fname = f.file_name()
                     .expect("Not a file")
                     .to_str()
                     .map(|s| s.starts_with("."));
        match fname {
            Some(true) => {
                continue;
            },
            Some(false) => {
                let s = path_buf_string(&f, "./");
                if f.is_file() {
                    println!("{}", file_format(&s));
                } else {
                    println!("{}", dir_format(&s));
                }
            },
            _ => {
                print_error("Something went wrong");
            }
        }
        
        
    }
    Ok(())
}

fn ls_path(p: &str) -> Result<(), Box<dyn std::error::Error>> {
    let path = Path::new(p);
    let mut files = fs::read_dir(&path)?
        .map(|res| res.map(|e| e.path()))
        .collect::<Result<Vec<_>, io::Error>>()?;
    files.sort();
    for f in files {
        let fname = f.file_name()
                     .expect("Not a file")
                     .to_str()
                     .map(|s| s.starts_with("."));
        match fname {
            Some(true) => {
                continue;
            },
            Some(false) => {
                let s = path_buf_string(&f, p);
                if f.is_file() {
                    println!("{}", file_format(&s));
                } else {
                    println!("{}", dir_format(&s));
                }
            },
            _ => {
                print_error("Something went wrong");
            }
        }
    }
    Ok(())
}

fn ls_all() -> Result<(), Box<dyn std::error::Error>> {
    let path = env::current_dir()?;
    let mut files = fs::read_dir(&path)?
        .map(|res| res.map(|e| e.path()))
        .collect::<Result<Vec<_>, io::Error>>()?;
    files.sort();
    for file in files {
        let s = path_buf_string(&file, &path.display().to_string());
        if file.is_file() {
            println!("{}", file_format(&s));
        } else {
            println!("{}", dir_format(&s));
        }
        //println!("{}", Path::new(&file).strip_prefix(&path)?.display());   
    }
    Ok(())
}

fn ls_all_path(p: &str) -> Result<(), Box<dyn std::error::Error>> {
    let path = Path::new(p);
    let mut files = fs::read_dir(&path)?
        .map(|res| res.map(|e| e.path()))
        .collect::<Result<Vec<_>, io::Error>>()?;
    files.sort();
    for file in files {
        let s = path_buf_string(&file, p);
        if file.is_file() {
            println!("{}", file_format(&s));
        } else {
            println!("{}", dir_format(&s));
        }
        //println!("{}", Path::new(&file).strip_prefix(p)?.display());   
    }
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_echo() {
        let v: Vec<String> = vec!["Hello, world!".to_string()];
        let result = echo(&v);
        assert_eq!(result, println!("{}", &v[0]));
    }
    #[test]
    fn test_error_format() {
        let result = error_format("Hello");
        assert!(result.contains("Hello"));
    }
    #[test]
    fn test_ls() -> Result<(), String> {
        let l = ls();
        match l {
            Ok(()) => { Ok(()) },
            _ => { Err(String::from("Error")) },
        }
    }
}

//fn is_not_hidden(entry: &DirEntry) -> bool {
//    entry.file_name()
//         .to_str()
//         .map(|s| entry.depth() == 0 || !s.starts_with("."))
//         .unwrap_or(false)
//}
//
//fn ls_recursive_path(p: &str) -> Result<(), Box<dyn std::error::Error>> {
//    let path = Path::new(p);
//    WalkDir::new(path)
//    .into_iter()
//    .filter_entry(|e| is_not_hidden(e))
//    .filter_map(|v| v.ok())
//    .for_each(|x| println!("{}", x.path().strip_prefix(path).expect("Error reading path").display()));
//    Ok(())
//}
